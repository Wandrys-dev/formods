% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/UD_Server.R
\name{UD_Server}
\alias{UD_Server}
\title{Data Upload Server}
\usage{
UD_Server(
  id,
  id_ASM = "ASM",
  FM_yaml_file = system.file(package = "formods", "templates", "formods.yaml"),
  MOD_yaml_file = system.file(package = "formods", "templates", "UD.yaml"),
  react_state = NULL
)
}
\arguments{
\item{id}{An ID string that corresponds with the ID used to call the modules UI elements}

\item{id_ASM}{ID string for the app state management module used to save and load app states}

\item{FM_yaml_file}{App configuration file with FM as main section.}

\item{MOD_yaml_file}{Module configuration file with MC as main section.}

\item{react_state}{Variable passed to server to allow reaction outside of module (\code{NULL})}
}
\value{
UD Server object
}
\description{
Server function for the Data Uplaod Shiny Module
}
\examples{
if(interactive()){
library(shiny)
library(formods)
library(shinydashboard)
#https://fontawesome.com/icons?from=io

ui <- dashboardPage(
  skin="red",
  dashboardHeader(title="Upload Data"),
  dashboardSidebar(
     sidebarMenu(
       menuItem("Upload Data",    tabName="dupload",  icon=icon("table"))
     )
  ),
  dashboardBody(
    tabItems(
       tabItem(tabName="dupload",
        fluidRow(
          htmlOutput(NS("UD",  "UD_ui_compact"))),
        fluidRow(tags$br()),
        fluidRow(
          verbatimTextOutput("ui_state"),width=12)
       )
     )
   )
 )

# Main app server
server <- function(input, output, session) {
  # Empty reactive object to track and react to
  # changes in the module state outside of the module
  react_FM = reactiveValues()

  # Module server
  UD_Server(id="UD", react_state=react_FM)

  # Current state outside of the module
  output$ui_state  =  renderText({
    input$input_data_file
    uiele = paste(capture.output(str(react_FM[["UD"]])), collapse="\n")
  uiele})
}

shinyApp(ui, server)
}
}
